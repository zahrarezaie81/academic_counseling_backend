"""initial tables

Revision ID: 1085e95347e5
Revises: 
Create Date: 2025-07-26 22:54:31.779008

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '1085e95347e5'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('userid', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('firstname', sa.String(), nullable=False),
    sa.Column('lastname', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('password_hash', sa.String(), nullable=False),
    sa.Column('role', postgresql.ENUM('student', 'counselor', 'admin', name='role_enum'), nullable=False),
    sa.Column('registrationDate', sa.DateTime(), nullable=True),
    sa.Column('profile_image_url', sa.String(), nullable=True),
    sa.Column('profile_image_filename', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('userid')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_userid'), 'users', ['userid'], unique=False)
    op.create_table('counselors',
    sa.Column('counselor_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('phone_number', sa.String(), nullable=True),
    sa.Column('province', sa.String(), nullable=True),
    sa.Column('city', sa.String(), nullable=True),
    sa.Column('department', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.userid'], ),
    sa.PrimaryKeyConstraint('counselor_id'),
    sa.UniqueConstraint('phone_number')
    )
    op.create_index(op.f('ix_counselors_counselor_id'), 'counselors', ['counselor_id'], unique=False)
    op.create_table('notifications',
    sa.Column('notification_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('message', sa.String(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('status', postgresql.ENUM('unread', 'read', name='notification_status_enum'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.userid'], ),
    sa.PrimaryKeyConstraint('notification_id')
    )
    op.create_index(op.f('ix_notifications_notification_id'), 'notifications', ['notification_id'], unique=False)
    op.create_table('students',
    sa.Column('student_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('phone_number', sa.String(), nullable=True),
    sa.Column('province', sa.String(), nullable=True),
    sa.Column('city', sa.String(), nullable=True),
    sa.Column('academic_year', sa.String(), nullable=True),
    sa.Column('major', sa.String(), nullable=True),
    sa.Column('gpa', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.userid'], ),
    sa.PrimaryKeyConstraint('student_id'),
    sa.UniqueConstraint('phone_number')
    )
    op.create_index(op.f('ix_students_student_id'), 'students', ['student_id'], unique=False)
    op.create_table('counselor_time_ranges',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('counselor_id', sa.Integer(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('from_time', sa.Time(), nullable=False),
    sa.Column('to_time', sa.Time(), nullable=False),
    sa.Column('duration', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['counselor_id'], ['counselors.counselor_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_counselor_time_ranges_id'), 'counselor_time_ranges', ['id'], unique=False)
    op.create_table('feedback',
    sa.Column('feedback_id', sa.Integer(), nullable=False),
    sa.Column('student_id', sa.Integer(), nullable=False),
    sa.Column('counselor_id', sa.Integer(), nullable=False),
    sa.Column('rating', sa.Integer(), nullable=False),
    sa.Column('comment', sa.String(), nullable=True),
    sa.Column('date_submitted', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['counselor_id'], ['counselors.counselor_id'], ),
    sa.ForeignKeyConstraint(['student_id'], ['students.student_id'], ),
    sa.PrimaryKeyConstraint('feedback_id')
    )
    op.create_index(op.f('ix_feedback_feedback_id'), 'feedback', ['feedback_id'], unique=False)
    op.create_table('recommendations',
    sa.Column('recommendation_id', sa.Integer(), nullable=False),
    sa.Column('student_id', sa.Integer(), nullable=False),
    sa.Column('suggested_course', sa.String(), nullable=True),
    sa.Column('career_suggestion', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['student_id'], ['students.student_id'], ),
    sa.PrimaryKeyConstraint('recommendation_id')
    )
    op.create_index(op.f('ix_recommendations_recommendation_id'), 'recommendations', ['recommendation_id'], unique=False)
    op.create_table('study_plans',
    sa.Column('plan_id', sa.Integer(), nullable=False),
    sa.Column('counselor_id', sa.Integer(), nullable=False),
    sa.Column('student_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('is_finalized', sa.Boolean(), nullable=True),
    sa.Column('is_submitted_by_student', sa.Boolean(), nullable=True),
    sa.Column('student_submit_time', sa.DateTime(), nullable=True),
    sa.Column('counselor_feedback', sa.String(), nullable=True),
    sa.Column('counselor_feedback_time', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['counselor_id'], ['counselors.counselor_id'], ),
    sa.ForeignKeyConstraint(['student_id'], ['students.student_id'], ),
    sa.PrimaryKeyConstraint('plan_id')
    )
    op.create_index(op.f('ix_study_plans_plan_id'), 'study_plans', ['plan_id'], unique=False)
    op.create_table('available_time_slots',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('range_id', sa.Integer(), nullable=False),
    sa.Column('start_time', sa.Time(), nullable=False),
    sa.Column('end_time', sa.Time(), nullable=False),
    sa.Column('is_reserved', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['range_id'], ['counselor_time_ranges.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_available_time_slots_id'), 'available_time_slots', ['id'], unique=False)
    op.create_table('study_activities',
    sa.Column('activity_id', sa.Integer(), nullable=False),
    sa.Column('plan_id', sa.Integer(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('start_time', sa.Time(), nullable=False),
    sa.Column('end_time', sa.Time(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('status', postgresql.ENUM('pending', 'done', 'not_done', name='activity_status_enum'), nullable=True),
    sa.Column('student_note', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['plan_id'], ['study_plans.plan_id'], ),
    sa.PrimaryKeyConstraint('activity_id')
    )
    op.create_index(op.f('ix_study_activities_activity_id'), 'study_activities', ['activity_id'], unique=False)
    op.create_table('appointments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('student_id', sa.Integer(), nullable=False),
    sa.Column('counselor_id', sa.Integer(), nullable=False),
    sa.Column('slot_id', sa.Integer(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('time', sa.Time(), nullable=False),
    sa.Column('status', postgresql.ENUM('pending', 'approved', 'cancelled', name='appointment_status_enum'), nullable=True),
    sa.Column('notes', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['counselor_id'], ['counselors.counselor_id'], ),
    sa.ForeignKeyConstraint(['slot_id'], ['available_time_slots.id'], ),
    sa.ForeignKeyConstraint(['student_id'], ['students.student_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_appointments_id'), 'appointments', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_appointments_id'), table_name='appointments')
    op.drop_table('appointments')
    op.drop_index(op.f('ix_study_activities_activity_id'), table_name='study_activities')
    op.drop_table('study_activities')
    op.drop_index(op.f('ix_available_time_slots_id'), table_name='available_time_slots')
    op.drop_table('available_time_slots')
    op.drop_index(op.f('ix_study_plans_plan_id'), table_name='study_plans')
    op.drop_table('study_plans')
    op.drop_index(op.f('ix_recommendations_recommendation_id'), table_name='recommendations')
    op.drop_table('recommendations')
    op.drop_index(op.f('ix_feedback_feedback_id'), table_name='feedback')
    op.drop_table('feedback')
    op.drop_index(op.f('ix_counselor_time_ranges_id'), table_name='counselor_time_ranges')
    op.drop_table('counselor_time_ranges')
    op.drop_index(op.f('ix_students_student_id'), table_name='students')
    op.drop_table('students')
    op.drop_index(op.f('ix_notifications_notification_id'), table_name='notifications')
    op.drop_table('notifications')
    op.drop_index(op.f('ix_counselors_counselor_id'), table_name='counselors')
    op.drop_table('counselors')
    op.drop_index(op.f('ix_users_userid'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
