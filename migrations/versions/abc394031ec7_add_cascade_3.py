"""add cascade 3

Revision ID: abc394031ec7
Revises: 078432941149
Create Date: 2025-08-02 01:26:50.624195

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'abc394031ec7'
down_revision: Union[str, Sequence[str], None] = '078432941149'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(op.f('appointments_counselor_id_fkey'), 'appointments', type_='foreignkey')
    op.drop_constraint(op.f('appointments_student_id_fkey'), 'appointments', type_='foreignkey')
    op.drop_constraint(op.f('appointments_slot_id_fkey'), 'appointments', type_='foreignkey')
    op.create_foreign_key(None, 'appointments', 'counselors', ['counselor_id'], ['counselor_id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'appointments', 'available_time_slots', ['slot_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'appointments', 'students', ['student_id'], ['student_id'], ondelete='CASCADE')
    op.drop_constraint(op.f('available_time_slots_range_id_fkey'), 'available_time_slots', type_='foreignkey')
    op.create_foreign_key(None, 'available_time_slots', 'counselor_time_ranges', ['range_id'], ['id'], ondelete='CASCADE')
    op.drop_constraint(op.f('counselor_time_ranges_counselor_id_fkey'), 'counselor_time_ranges', type_='foreignkey')
    op.create_foreign_key(None, 'counselor_time_ranges', 'counselors', ['counselor_id'], ['counselor_id'], ondelete='CASCADE')
    op.drop_constraint(op.f('feedback_counselor_id_fkey'), 'feedback', type_='foreignkey')
    op.drop_constraint(op.f('feedback_student_id_fkey'), 'feedback', type_='foreignkey')
    op.create_foreign_key(None, 'feedback', 'counselors', ['counselor_id'], ['counselor_id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'feedback', 'students', ['student_id'], ['student_id'], ondelete='CASCADE')
    op.drop_constraint(op.f('notifications_user_id_fkey'), 'notifications', type_='foreignkey')
    op.create_foreign_key(None, 'notifications', 'users', ['user_id'], ['userid'], ondelete='CASCADE')
    op.drop_constraint(op.f('recommendations_student_id_fkey'), 'recommendations', type_='foreignkey')
    op.drop_constraint(op.f('recommendations_counselor_id_fkey'), 'recommendations', type_='foreignkey')
    op.create_foreign_key(None, 'recommendations', 'counselors', ['counselor_id'], ['counselor_id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'recommendations', 'students', ['student_id'], ['student_id'], ondelete='CASCADE')
    op.drop_constraint(op.f('study_activities_plan_id_fkey'), 'study_activities', type_='foreignkey')
    op.create_foreign_key(None, 'study_activities', 'study_plans', ['plan_id'], ['plan_id'], ondelete='CASCADE')
    op.drop_constraint(op.f('study_plans_counselor_id_fkey'), 'study_plans', type_='foreignkey')
    op.drop_constraint(op.f('study_plans_student_id_fkey'), 'study_plans', type_='foreignkey')
    op.create_foreign_key(None, 'study_plans', 'students', ['student_id'], ['student_id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'study_plans', 'counselors', ['counselor_id'], ['counselor_id'], ondelete='CASCADE')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'study_plans', type_='foreignkey')
    op.drop_constraint(None, 'study_plans', type_='foreignkey')
    op.create_foreign_key(op.f('study_plans_student_id_fkey'), 'study_plans', 'students', ['student_id'], ['student_id'])
    op.create_foreign_key(op.f('study_plans_counselor_id_fkey'), 'study_plans', 'counselors', ['counselor_id'], ['counselor_id'])
    op.drop_constraint(None, 'study_activities', type_='foreignkey')
    op.create_foreign_key(op.f('study_activities_plan_id_fkey'), 'study_activities', 'study_plans', ['plan_id'], ['plan_id'])
    op.drop_constraint(None, 'recommendations', type_='foreignkey')
    op.drop_constraint(None, 'recommendations', type_='foreignkey')
    op.create_foreign_key(op.f('recommendations_counselor_id_fkey'), 'recommendations', 'counselors', ['counselor_id'], ['counselor_id'])
    op.create_foreign_key(op.f('recommendations_student_id_fkey'), 'recommendations', 'students', ['student_id'], ['student_id'])
    op.drop_constraint(None, 'notifications', type_='foreignkey')
    op.create_foreign_key(op.f('notifications_user_id_fkey'), 'notifications', 'users', ['user_id'], ['userid'])
    op.drop_constraint(None, 'feedback', type_='foreignkey')
    op.drop_constraint(None, 'feedback', type_='foreignkey')
    op.create_foreign_key(op.f('feedback_student_id_fkey'), 'feedback', 'students', ['student_id'], ['student_id'])
    op.create_foreign_key(op.f('feedback_counselor_id_fkey'), 'feedback', 'counselors', ['counselor_id'], ['counselor_id'])
    op.drop_constraint(None, 'counselor_time_ranges', type_='foreignkey')
    op.create_foreign_key(op.f('counselor_time_ranges_counselor_id_fkey'), 'counselor_time_ranges', 'counselors', ['counselor_id'], ['counselor_id'])
    op.drop_constraint(None, 'available_time_slots', type_='foreignkey')
    op.create_foreign_key(op.f('available_time_slots_range_id_fkey'), 'available_time_slots', 'counselor_time_ranges', ['range_id'], ['id'])
    op.drop_constraint(None, 'appointments', type_='foreignkey')
    op.drop_constraint(None, 'appointments', type_='foreignkey')
    op.drop_constraint(None, 'appointments', type_='foreignkey')
    op.create_foreign_key(op.f('appointments_slot_id_fkey'), 'appointments', 'available_time_slots', ['slot_id'], ['id'])
    op.create_foreign_key(op.f('appointments_student_id_fkey'), 'appointments', 'students', ['student_id'], ['student_id'])
    op.create_foreign_key(op.f('appointments_counselor_id_fkey'), 'appointments', 'counselors', ['counselor_id'], ['counselor_id'])
    # ### end Alembic commands ###
